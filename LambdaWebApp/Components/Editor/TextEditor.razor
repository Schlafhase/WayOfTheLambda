<div id="container">
    <div id="line-numbers">
        @for (int i = 1; i <= Text.Split('\n').Length; i++)
        {
            <div>@i</div>
        }
    </div>
    <div @ref="_editor" id="editor"
         tabindex="0"
         data-idling="@(_idling ? "true" : "false")"
         @onmousedown="onEditorClick"
         @onkeydown="onEditorKeyDown"
         @onkeydown:preventDefault="true">

        <div>
            @foreach (Token token in tokenise())
            {
                @switch (token.Type)
                {
                    case TokenType.Lambda:
                        <span @onmousedown:preventDefault="true" class="lambda">@token.Value</span>
                        break;
                    case TokenType.Parenthesis:
                        <span @onmousedown:preventDefault="true" class="parenthesis">@token.Value</span>
                        break;
                    case TokenType.Cursor:
                        <span @onmousedown:preventDefault="true" id="cursor"></span>
                        break;
                    case TokenType.Newline:
                        <br/>
                        break;
                    case TokenType.Variable:
                    default:
                        @token.Value
                        break;
                }
            }
            <span class="invisible">_</span> <!-- For fit-content property -->
        </div>
        <div class="placeholder"></div>
    </div>
</div>


<script>
    const container = document.getElementById("container");
    window.scrollToCursor = function (line) {
        // TODO: Only scroll when needed and scroll to the nearest edge
        container.scrollTop = document.defaultView.getComputedStyle(container, null).getPropertyValue("line-height").replace("px", "") * line;
        console.log(container.scrollTop);
    }

</script>